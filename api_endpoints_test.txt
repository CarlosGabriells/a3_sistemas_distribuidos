LIBRARY MANAGEMENT SYSTEM - API ENDPOINTS EXAMPLES
==================================================

Base URL: http://localhost:8080/api

IMPORTANTE: Execute o script de população de dados primeiro:
   ./scripts/populate-database.sh

FLUXO DINÂMICO DE TESTES - CENÁRIO COMPLETO
===========================================

CENÁRIO: Nova biblioteca com dados já populados
STATUS: 8 autores, 8 categorias, 12 livros, 10 membros, 10 empréstimos

PHASE 1: CONSULTANDO DADOS EXISTENTES
=====================================

1. Listar todos os autores
curl -X GET "http://localhost:8080/api/authors"

2. Buscar autor específico (J.K. Rowling)
curl -X GET "http://localhost:8080/api/authors/1"

3. Ver livros de J.K. Rowling
curl -X GET "http://localhost:8080/api/authors/1/with-books"

4. Listar categorias disponíveis
curl -X GET "http://localhost:8080/api/categories/all"

5. Ver livros da categoria Fantasy
curl -X GET "http://localhost:8080/api/categories/1/with-books"

6. Consultar livro específico (Harry Potter)
curl -X GET "http://localhost:8080/api/books/1"

7. Buscar livro por ISBN
curl -X GET "http://localhost:8080/api/books/isbn/9780747532699"

8. Ver livros disponíveis
curl -X GET "http://localhost:8080/api/books/available"

9. Consultar membro ativo
curl -X GET "http://localhost:8080/api/members/1"

10. Ver empréstimos do John Smith
curl -X GET "http://localhost:8080/api/members/1/with-loans"

PHASE 2: CRIANDO NOVOS REGISTROS
=================================

11. Criar novo autor brasileiro
curl -X POST "http://localhost:8080/api/authors" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "Machado",
    "lastName": "de Assis",
    "biography": "Joaquim Maria Machado de Assis foi um escritor brasileiro, considerado um dos maiores nomes da literatura nacional e mundial.",
    "birthDate": "1839-06-21",
    "nationality": "Brazilian"
  }'

12. Criar nova categoria
curl -X POST "http://localhost:8080/api/categories" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Literatura Brasileira",
    "description": "Obras de autores brasileiros que representam a cultura e história do Brasil"
  }'

13. Criar novo livro (usando ID do autor criado - normalmente será 9)
curl -X POST "http://localhost:8080/api/books" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Dom Casmurro",
    "isbn": "9788525406140",
    "description": "Romance clássico da literatura brasileira que narra a história de Bentinho e Capitu",
    "publicationDate": "1899-12-01",
    "totalCopies": 5,
    "availableCopies": 5,
    "authorId": 9,
    "categoryIds": [9, 4]
  }'

14. Criar novo membro
curl -X POST "http://localhost:8080/api/members" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "Ana",
    "lastName": "Silva",
    "email": "ana.silva@biblioteca.com",
    "phone": "(11) 99999-1234",
    "address": "Rua das Flores, 123, São Paulo, SP",
    "membershipDate": "2024-12-17",
    "status": "ACTIVE"
  }'

PHASE 3: OPERAÇÕES DE EMPRÉSTIMO
=================================

15. Criar novo empréstimo (membro 11 pega livro 13) //retornando erro
curl -X POST "http://localhost:8080/api/loans" \
  -H "Content-Type: application/json" \
  -d '{
    "loanDate": "2024-12-17",
    "dueDate": "2024-12-31",
    "status": "ACTIVE",
    "memberId": 11,
    "bookId": 13,
    "notes": "Primeiro empréstimo da Ana Silva"
  }'

16. Consultar empréstimos ativos
curl -X GET "http://localhost:8080/api/loans/status/ACTIVE"

17. Ver empréstimos em atraso
curl -X GET "http://localhost:8080/api/loans/overdue"

18. Devolver livro (empréstimo ID 11)
curl -X PATCH "http://localhost:8080/api/loans/11/return"

PHASE 4: OPERAÇÕES DE BUSCA E FILTRO
====================================

19. Buscar autores por nacionalidade
curl -X GET "http://localhost:8080/api/authors/nationality/British"

20. Buscar livros por palavra-chave
curl -X GET "http://localhost:8080/api/books/search?keyword=Harry"

21. Buscar membros por nome
curl -X GET "http://localhost:8080/api/members/search?name=John"

22. Buscar categorias
curl -X GET "http://localhost:8080/api/categories/search?name=Fantasy"

23. Filtrar membros por status
curl -X GET "http://localhost:8080/api/members/status/ACTIVE"

24. Empréstimos por período
curl -X GET "http://localhost:8080/api/loans/date-range?startDate=2024-01-01&endDate=2024-12-31"

PHASE 5: ATUALIZAÇÕES
=====================

25. Atualizar dados do autor
curl -X PUT "http://localhost:8080/api/authors/9" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "Joaquim Maria Machado",
    "lastName": "de Assis",
    "biography": "Joaquim Maria Machado de Assis foi um escritor brasileiro, considerado um dos maiores nomes da literatura nacional e mundial. Fundador da Academia Brasileira de Letras.",
    "birthDate": "1839-06-21",
    "nationality": "Brazilian"
  }'

26. Atualizar categoria
curl -X PUT "http://localhost:8080/api/categories/9" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Literatura Brasileira Clássica",
    "description": "Obras clássicas de autores brasileiros que marcaram a literatura nacional"
  }'

27. Atualizar livro (adicionar mais cópias)
curl -X PUT "http://localhost:8080/api/books/13" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Dom Casmurro",
    "isbn": "9788525406140",
    "description": "Romance clássico da literatura brasileira que narra a história de Bentinho e Capitu. Uma das obras mais importantes de Machado de Assis.",
    "publicationDate": "1899-12-01",
    "totalCopies": 8,
    "availableCopies": 8,
    "authorId": 9,
    "categoryIds": [9, 4]
  }'

28. Atualizar membro
curl -X PUT "http://localhost:8080/api/members/11" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "Ana Paula",
    "lastName": "Silva Santos",
    "email": "ana.paula@biblioteca.com",
    "phone": "(11) 98888-5678",
    "address": "Rua das Flores, 123, Apt 45, São Paulo, SP",
    "membershipDate": "2024-12-17",
    "status": "ACTIVE"
  }'

29. Suspender membro
curl -X PATCH "http://localhost:8080/api/members/5/status?status=SUSPENDED"

PHASE 6: ADMINISTRAÇÃO SISTEMA
==============================

30. Atualizar empréstimos em atraso automaticamente
curl -X PATCH "http://localhost:8080/api/loans/update-overdue"

31. Relatório de livros por categoria
curl -X GET "http://localhost:8080/api/books/category/1"

32. Ver todos os empréstimos de um livro específico
curl -X GET "http://localhost:8080/api/loans/book/1"

ENDPOINT COMPLETO POR ENTIDADE
===============================

AUTHOR ENDPOINTS (7 endpoints)
-------------------------------
GET    /api/authors                           # Listar com paginação
GET    /api/authors/{id}                     # Buscar por ID  
GET    /api/authors/{id}/with-books          # Autor com livros
GET    /api/authors/search?name={name}       # Buscar por nome
GET    /api/authors/nationality/{nationality} # Por nacionalidade
POST   /api/authors                          # Criar
PUT    /api/authors/{id}                     # Atualizar
DELETE /api/authors/{id}                     # Deletar

CATEGORY ENDPOINTS (8 endpoints)
--------------------------------
GET    /api/categories                       # Listar com paginação
GET    /api/categories/all                   # Listar todas
GET    /api/categories/{id}                  # Buscar por ID
GET    /api/categories/{id}/with-books       # Categoria com livros
GET    /api/categories/name/{name}           # Por nome exato
GET    /api/categories/search?name={name}    # Buscar por nome
POST   /api/categories                       # Criar
PUT    /api/categories/{id}                  # Atualizar
DELETE /api/categories/{id}                  # Deletar

BOOK ENDPOINTS (8 endpoints)
-----------------------------
GET    /api/books                           # Listar com paginação
GET    /api/books/{id}                      # Buscar por ID
GET    /api/books/isbn/{isbn}               # Buscar por ISBN
GET    /api/books/available                 # Livros disponíveis
GET    /api/books/category/{categoryId}     # Por categoria
GET    /api/books/search?keyword={keyword}  # Buscar por palavra-chave
POST   /api/books                           # Criar
PUT    /api/books/{id}                      # Atualizar
DELETE /api/books/{id}                      # Deletar

MEMBER ENDPOINTS (9 endpoints)
------------------------------
GET    /api/members                         # Listar com paginação
GET    /api/members/{id}                    # Buscar por ID
GET    /api/members/{id}/with-loans         # Membro com empréstimos
GET    /api/members/email/{email}           # Buscar por email
GET    /api/members/search?name={name}      # Buscar por nome
GET    /api/members/status/{status}         # Por status
POST   /api/members                         # Criar
PUT    /api/members/{id}                    # Atualizar
PATCH  /api/members/{id}/status?status={status} # Atualizar status
DELETE /api/members/{id}                    # Deletar

LOAN ENDPOINTS (11 endpoints)
-----------------------------
GET    /api/loans                          # Listar com paginação
GET    /api/loans/{id}                     # Buscar por ID
GET    /api/loans/member/{memberId}        # Por membro
GET    /api/loans/book/{bookId}            # Por livro
GET    /api/loans/status/{status}          # Por status
GET    /api/loans/overdue                  # Em atraso
GET    /api/loans/date-range?startDate={start}&endDate={end} # Por período
POST   /api/loans                          # Criar
PUT    /api/loans/{id}                     # Atualizar
PATCH  /api/loans/{id}/return              # Devolver
PATCH  /api/loans/update-overdue           # Atualizar atrasos
DELETE /api/loans/{id}                     # Deletar

EXEMPLOS DE DADOS REAIS (após populate)
=======================================

AUTORES DISPONÍVEIS:
ID 1: Joanne Rowling (British) - Harry Potter
ID 2: George Orwell (British) - 1984, Animal Farm  
ID 3: Harper Lee (American) - To Kill a Mockingbird
ID 4: Agatha Christie (British) - Murder on Orient Express
ID 5: Stephen King (American) - The Shining, It
ID 6: Jane Austen (British) - Pride and Prejudice
ID 7: Ernest Hemingway (American) - The Old Man and the Sea
ID 8: Gabriel García Márquez (Colombian) - One Hundred Years of Solitude

CATEGORIAS DISPONÍVEIS:
ID 1: Fantasy, ID 2: Science Fiction, ID 3: Mystery
ID 4: Classic Literature, ID 5: Horror, ID 6: Romance
ID 7: Historical Fiction, ID 8: Dystopian

LIVROS POPULARES:
ID 1: Harry Potter and the Philosopher's Stone (ISBN: 9780747532699)
ID 3: 1984 (ISBN: 9780451524935)
ID 5: To Kill a Mockingbird (ISBN: 9780061120084)

MEMBROS ATIVOS:
ID 1: John Smith (john.smith@email.com) - ACTIVE
ID 2: Emma Johnson (emma.johnson@email.com) - ACTIVE
ID 5: David Wilson (david.wilson@email.com) - SUSPENDED

TESTES DE VALIDAÇÃO E ERRO
===========================

Teste de duplicação - Email já existe:
curl -X POST "http://localhost:8080/api/members" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "Teste",
    "lastName": "Duplicado",
    "email": "john.smith@email.com",
    "phone": "(11) 99999-0000",
    "address": "Teste",
    "membershipDate": "2024-12-17",
    "status": "ACTIVE"
  }'

Teste de validação - Campos obrigatórios:
curl -X POST "http://localhost:8080/api/authors" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "",
    "lastName": "",
    "birthDate": "2030-01-01"
  }'

Teste de ISBN duplicado:
curl -X POST "http://localhost:8080/api/books" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Livro Duplicado",
    "isbn": "9780747532699",
    "description": "Teste",
    "publicationDate": "2024-01-01",
    "totalCopies": 1,
    "availableCopies": 1,
    "authorId": 1,
    "categoryIds": [1]
  }'

PAGINAÇÃO E ORDENAÇÃO
=====================

Página 2 com 5 itens por página:
curl -X GET "http://localhost:8080/api/books?page=1&size=5"

Ordenar por título:
curl -X GET "http://localhost:8080/api/books?sort=title,asc"

Ordenar por data de publicação (mais recente primeiro):
curl -X GET "http://localhost:8080/api/books?sort=publicationDate,desc"

DICAS PARA TESTES DINÂMICOS
============================

1. SEMPRE execute populate-database.sh primeiro
2. Use os IDs retornados nas responses para próximos testes  
3. Emails devem ser únicos entre membros
4. ISBNs devem ser únicos entre livros
5. Membros SUSPENDED não podem fazer empréstimos
6. Livros sem cópias disponíveis não podem ser emprestados
7. Empréstimos com dueDate < hoje ficam OVERDUE automaticamente
8. Use PATCH para operações parciais (status, devolução)
9. DELETE remove permanentemente (cuidado!)
10. Todas as listas suportam paginação (?page=0&size=10)